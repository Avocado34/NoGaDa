//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let reuseIdentifier = reuseIdentifier()

  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var infoPlist: infoPlist { .init(source: .init(bundle: bundle, tableName: "InfoPlist", preferredLanguages: preferredLanguages, locale: locale)) }
    var launchScreen: launchScreen { .init(source: .init(bundle: bundle, tableName: "LaunchScreen", preferredLanguages: preferredLanguages, locale: locale)) }
    var main: main { .init(source: .init(bundle: bundle, tableName: "Main", preferredLanguages: preferredLanguages, locale: locale)) }

    func infoPlist(preferredLanguages: [String]) -> infoPlist {
      .init(source: .init(bundle: bundle, tableName: "InfoPlist", preferredLanguages: preferredLanguages, locale: locale))
    }
    func launchScreen(preferredLanguages: [String]) -> launchScreen {
      .init(source: .init(bundle: bundle, tableName: "LaunchScreen", preferredLanguages: preferredLanguages, locale: locale))
    }
    func main(preferredLanguages: [String]) -> main {
      .init(source: .init(bundle: bundle, tableName: "Main", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.infoPlist` struct is generated, and contains static references to 1 localization keys.
    struct infoPlist {
      let source: RswiftResources.StringResource.Source

      /// en translation: NoGaDa
      ///
      /// Key: CFBundleDisplayName
      ///
      /// Locales: ko, en
      var cfBundleDisplayName: RswiftResources.StringResource { .init(key: "CFBundleDisplayName", tableName: "InfoPlist", source: source, developmentValue: "NoGaDa", comment: nil) }
    }

    /// This `_R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      let source: RswiftResources.StringResource.Source
    }

    /// This `_R.string.main` struct is generated, and contains static references to 32 localization keys.
    struct main {
      let source: RswiftResources.StringResource.Source

      /// ko translation: 제목이나 가수명으로 노래를 검색하세요
      ///
      /// Key: 4Jq-qh-3mw.text
      ///
      /// Locales: ko
      var jqQh3mwText: RswiftResources.StringResource { .init(key: "4Jq-qh-3mw.text", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: Contact us
      ///
      /// Key: 6P6-Kw-gij.text
      ///
      /// Locales: ko
      var p6KwGijText: RswiftResources.StringResource { .init(key: "6P6-Kw-gij.text", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: 폴더 이름
      ///
      /// Key: 7w4-j5-IR6.placeholder
      ///
      /// Locales: ko
      var w4J5IR6Placeholder: RswiftResources.StringResource { .init(key: "7w4-j5-IR6.placeholder", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: 새 폴더
      ///
      /// Key: C4h-cQ-6N2.text
      ///
      /// Locales: ko
      var c4hCQ6N2Text: RswiftResources.StringResource { .init(key: "C4h-cQ-6N2.text", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: + 새 폴더 생성
      ///
      /// Key: Cbk-yG-6kt.normalTitle
      ///
      /// Locales: ko
      var cbkYG6ktNormalTitle: RswiftResources.StringResource { .init(key: "Cbk-yG-6kt.normalTitle", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: 😀
      ///
      /// Key: Cpu-J9-uYf.text
      ///
      /// Locales: ko
      var cpuJ9UYfText: RswiftResources.StringResource { .init(key: "Cpu-J9-uYf.text", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: 오류가 발생했습니다.
      ///
      /// Key: CxZ-Cq-9Qe.text
      ///
      /// Locales: ko
      var cxZCq9QeText: RswiftResources.StringResource { .init(key: "CxZ-Cq-9Qe.text", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: 노래방 가서 다 부를거야!
      ///
      /// Key: DLU-ju-7zi.text
      ///
      /// Locales: ko
      var dluJu7ziText: RswiftResources.StringResource { .init(key: "DLU-ju-7zi.text", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: tj
      ///
      /// Key: HWm-DX-mxj.segmentTitles[0]
      ///
      /// Locales: ko
      var hWmDXMxjSegmentTitles0: RswiftResources.StringResource { .init(key: "HWm-DX-mxj.segmentTitles[0]", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: 금영
      ///
      /// Key: HWm-DX-mxj.segmentTitles[1]
      ///
      /// Locales: ko
      var hWmDXMxjSegmentTitles1: RswiftResources.StringResource { .init(key: "HWm-DX-mxj.segmentTitles[1]", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: 제목이나 가수명으로 노래를 검색하세요
      ///
      /// Key: I1L-Kc-4uI.placeholder
      ///
      /// Locales: ko
      var i1LKc4uIPlaceholder: RswiftResources.StringResource { .init(key: "I1L-Kc-4uI.placeholder", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: 총 --곡
      ///
      /// Key: I8f-kb-mSm.text
      ///
      /// Locales: ko
      var i8fKbMSmText: RswiftResources.StringResource { .init(key: "I8f-kb-mSm.text", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: Credit
      ///
      /// Key: J4O-zs-k0K.text
      ///
      /// Locales: ko
      var j4OZsK0KText: RswiftResources.StringResource { .init(key: "J4O-zs-k0K.text", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: 적용
      ///
      /// Key: KXr-bc-Zdo.normalTitle
      ///
      /// Locales: ko
      var kXrBcZdoNormalTitle: RswiftResources.StringResource { .init(key: "KXr-bc-Zdo.normalTitle", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: Setting
      ///
      /// Key: M4g-7J-YGo.text
      ///
      /// Locales: ko
      var m4g7JYGoText: RswiftResources.StringResource { .init(key: "M4g-7J-YGo.text", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: 기타
      ///
      /// Key: SVo-nP-6mw.text
      ///
      /// Locales: ko
      var sVoNP6mwText: RswiftResources.StringResource { .init(key: "SVo-nP-6mw.text", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: 보관함
      ///
      /// Key: UOS-9k-ADV.text
      ///
      /// Locales: ko
      var uos9kADVText: RswiftResources.StringResource { .init(key: "UOS-9k-ADV.text", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: 노래방 가서 부르고 싶은 노래
      ///
      /// Key: VpG-sO-j57.text
      ///
      /// Locales: ko
      var vpGSOJ57Text: RswiftResources.StringResource { .init(key: "VpG-sO-j57.text", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: 보관함 바로가기
      ///
      /// Key: Ysc-M8-Y7u.text
      ///
      /// Locales: ko
      var yscM8Y7uText: RswiftResources.StringResource { .init(key: "Ysc-M8-Y7u.text", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: 보관함
      ///
      /// Key: asG-Yn-m5w.text
      ///
      /// Locales: ko
      var asGYnM5wText: RswiftResources.StringResource { .init(key: "asG-Yn-m5w.text", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: + 새 폴더 생성
      ///
      /// Key: bTv-E6-Q0q.normalTitle
      ///
      /// Locales: ko
      var bTvE6Q0qNormalTitle: RswiftResources.StringResource { .init(key: "bTv-E6-Q0q.normalTitle", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: 노래 검색
      ///
      /// Key: cQ5-Pr-b1K.text
      ///
      /// Locales: ko
      var cQ5PrB1KText: RswiftResources.StringResource { .init(key: "cQ5-Pr-b1K.text", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: Main
      ///
      /// Key: dBf-gf-Im0.title
      ///
      /// Locales: ko
      var dBfGfIm0Title: RswiftResources.StringResource { .init(key: "dBf-gf-Im0.title", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: 확인
      ///
      /// Key: fSo-Bc-Q9v.normalTitle
      ///
      /// Locales: ko
      var fSoBcQ9vNormalTitle: RswiftResources.StringResource { .init(key: "fSo-Bc-Q9v.normalTitle", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: Developer : Lee Seunggi Ui/Ux Design: Lee Seunggi Contact : avocado34.131@gmail.com   Api Contributor : Yun KwangSeon Contact : middleyks@hanmail.net
      ///
      /// Key: gjp-Oi-p6X.text
      ///
      /// Locales: ko
      var gjpOiP6XText: RswiftResources.StringResource { .init(key: "gjp-Oi-p6X.text", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: Used resources
      ///
      /// Key: hgy-DL-w7S.text
      ///
      /// Locales: ko
      var hgyDLW7SText: RswiftResources.StringResource { .init(key: "hgy-DL-w7S.text", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: 검색필터
      ///
      /// Key: hkW-sj-9w7.text
      ///
      /// Locales: ko
      var hkWSj9w7Text: RswiftResources.StringResource { .init(key: "hkW-sj-9w7.text", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: 노래 검색
      ///
      /// Key: lvi-2L-p6a.title
      ///
      /// Locales: ko
      var lvi2LP6aTitle: RswiftResources.StringResource { .init(key: "lvi-2L-p6a.title", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: 검색 결과가 없습니다.
      ///
      /// Key: nd8-5P-dIH.text
      ///
      /// Locales: ko
      var nd85PDIHText: RswiftResources.StringResource { .init(key: "nd8-5P-dIH.text", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: 노가다 노래방 가서 다 부를거야  version 1.0.0
      ///
      /// Key: skd-ZX-9Km.text
      ///
      /// Locales: ko
      var skdZX9KmText: RswiftResources.StringResource { .init(key: "skd-ZX-9Km.text", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: Copyright © LeeSeunggi All Right Reserved
      ///
      /// Key: suC-8F-fRQ.text
      ///
      /// Locales: ko
      var suC8FFRQText: RswiftResources.StringResource { .init(key: "suC-8F-fRQ.text", tableName: "Main", source: source, developmentValue: nil, comment: nil) }

      /// ko translation: 😃
      ///
      /// Key: zbA-aj-vX6.text
      ///
      /// Locales: ko
      var zbAAjVX6Text: RswiftResources.StringResource { .init(key: "zbA-aj-vX6.text", tableName: "Main", source: source, developmentValue: nil, comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 28 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentBlue`.
    var accentBlue: RswiftResources.ColorResource { .init(name: "AccentBlue", path: [], bundle: bundle) }

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `AccentOrange`.
    var accentOrange: RswiftResources.ColorResource { .init(name: "AccentOrange", path: [], bundle: bundle) }

    /// Color `AccentPink`.
    var accentPink: RswiftResources.ColorResource { .init(name: "AccentPink", path: [], bundle: bundle) }

    /// Color `AccentPurple`.
    var accentPurple: RswiftResources.ColorResource { .init(name: "AccentPurple", path: [], bundle: bundle) }

    /// Color `AccentPurpleLight`.
    var accentPurpleLight: RswiftResources.ColorResource { .init(name: "AccentPurpleLight", path: [], bundle: bundle) }

    /// Color `AccentYellow`.
    var accentYellow: RswiftResources.ColorResource { .init(name: "AccentYellow", path: [], bundle: bundle) }

    /// Color `AccentYellowDark`.
    var accentYellowDark: RswiftResources.ColorResource { .init(name: "AccentYellowDark", path: [], bundle: bundle) }

    /// Color `AccentYellowDarker`.
    var accentYellowDarker: RswiftResources.ColorResource { .init(name: "AccentYellowDarker", path: [], bundle: bundle) }

    /// Color `AccentYellowDisable`.
    var accentYellowDisable: RswiftResources.ColorResource { .init(name: "AccentYellowDisable", path: [], bundle: bundle) }

    /// Color `BackgroundBasic`.
    var backgroundBasic: RswiftResources.ColorResource { .init(name: "BackgroundBasic", path: [], bundle: bundle) }

    /// Color `BackgroundBasicSelected`.
    var backgroundBasicSelected: RswiftResources.ColorResource { .init(name: "BackgroundBasicSelected", path: [], bundle: bundle) }

    /// Color `BackgroundSecondary`.
    var backgroundSecondary: RswiftResources.ColorResource { .init(name: "BackgroundSecondary", path: [], bundle: bundle) }

    /// Color `BackgroundWhite`.
    var backgroundWhite: RswiftResources.ColorResource { .init(name: "BackgroundWhite", path: [], bundle: bundle) }

    /// Color `Basic`.
    var basic: RswiftResources.ColorResource { .init(name: "Basic", path: [], bundle: bundle) }

    /// Color `Black`.
    var black: RswiftResources.ColorResource { .init(name: "Black", path: [], bundle: bundle) }

    /// Color `IconBasic`.
    var iconBasic: RswiftResources.ColorResource { .init(name: "IconBasic", path: [], bundle: bundle) }

    /// Color `IconBasicSecondary`.
    var iconBasicSecondary: RswiftResources.ColorResource { .init(name: "IconBasicSecondary", path: [], bundle: bundle) }

    /// Color `IconBlack`.
    var iconBlack: RswiftResources.ColorResource { .init(name: "IconBlack", path: [], bundle: bundle) }

    /// Color `IconSecondary`.
    var iconSecondary: RswiftResources.ColorResource { .init(name: "IconSecondary", path: [], bundle: bundle) }

    /// Color `IconWhite`.
    var iconWhite: RswiftResources.ColorResource { .init(name: "IconWhite", path: [], bundle: bundle) }

    /// Color `LineBasic`.
    var lineBasic: RswiftResources.ColorResource { .init(name: "LineBasic", path: [], bundle: bundle) }

    /// Color `TextBasic`.
    var textBasic: RswiftResources.ColorResource { .init(name: "TextBasic", path: [], bundle: bundle) }

    /// Color `TextBlack`.
    var textBlack: RswiftResources.ColorResource { .init(name: "TextBlack", path: [], bundle: bundle) }

    /// Color `TextSecondary`.
    var textSecondary: RswiftResources.ColorResource { .init(name: "TextSecondary", path: [], bundle: bundle) }

    /// Color `TextTertiary`.
    var textTertiary: RswiftResources.ColorResource { .init(name: "TextTertiary", path: [], bundle: bundle) }

    /// Color `TextWhite`.
    var textWhite: RswiftResources.ColorResource { .init(name: "TextWhite", path: [], bundle: bundle) }

    /// Color `White`.
    var white: RswiftResources.ColorResource { .init(name: "White", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 13 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `ArchiveShortcutBackgroundImage`.
    var archiveShortcutBackgroundImage: RswiftResources.ImageResource { .init(name: "ArchiveShortcutBackgroundImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `SplashImage`.
    var splashImage: RswiftResources.ImageResource { .init(name: "SplashImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `back-arrow`.
    var backArrow: RswiftResources.ImageResource { .init(name: "back-arrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chevron-right`.
    var chevronRight: RswiftResources.ImageResource { .init(name: "chevron-right", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `email`.
    var email: RswiftResources.ImageResource { .init(name: "email", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `folder`.
    var folder: RswiftResources.ImageResource { .init(name: "folder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `folder-filled`.
    var folderFilled: RswiftResources.ImageResource { .init(name: "folder-filled", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `information.fill`.
    var informationFill: RswiftResources.ImageResource { .init(name: "information.fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `music-note`.
    var musicNote: RswiftResources.ImageResource { .init(name: "music-note", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `plus`.
    var plus: RswiftResources.ImageResource { .init(name: "plus", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `setting`.
    var setting: RswiftResources.ImageResource { .init(name: "setting", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `sort-line`.
    var sortLine: RswiftResources.ImageResource { .init(name: "sort-line", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `trash-bin`.
    var trashBin: RswiftResources.ImageResource { .init(name: "trash-bin", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
          }
        }
      }
    }
  }

  /// This `_R.nib` struct is generated, and contains static references to 10 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `FolderTableViewCell`.
    var folderTableViewCell: RswiftResources.NibReferenceReuseIdentifier<FolderTableViewCell, FolderTableViewCell> { .init(name: "FolderTableViewCell", bundle: bundle, identifier: "folderTableViewCell") }

    /// Nib `IconResourceCollectionViewCell`.
    var iconResourceCollectionViewCell: RswiftResources.NibReferenceReuseIdentifier<IconResourceCollectionViewCell, IconResourceCollectionViewCell> { .init(name: "IconResourceCollectionViewCell", bundle: bundle, identifier: "iconResourceCollectionCell") }

    /// Nib `KaraokeBrandPickerTableViewCell`.
    var karaokeBrandPickerTableViewCell: RswiftResources.NibReferenceReuseIdentifier<KaraokeBrandPickerTableViewCell, KaraokeBrandPickerTableViewCell> { .init(name: "KaraokeBrandPickerTableViewCell", bundle: bundle, identifier: "karaokeBrandTableCell") }

    /// Nib `PopUpArchiveFolderTableViewCell`.
    var popUpArchiveFolderTableViewCell: RswiftResources.NibReferenceReuseIdentifier<PopUpArchiveFolderTableViewCell, PopUpArchiveFolderTableViewCell> { .init(name: "PopUpArchiveFolderTableViewCell", bundle: bundle, identifier: "popUpArchiveTableCell") }

    /// Nib `PopUpSongOptionTableViewCell`.
    var popUpSongOptionTableViewCell: RswiftResources.NibReferenceReuseIdentifier<PopUpSongOptionTableViewCell, PopUpSongOptionTableViewCell> { .init(name: "PopUpSongOptionTableViewCell", bundle: bundle, identifier: "popUpSongOptionTableCell") }

    /// Nib `SearchFilterTableViewCell`.
    var searchFilterTableViewCell: RswiftResources.NibReferenceReuseIdentifier<SearchFilterTableViewCell, SearchFilterTableViewCell> { .init(name: "SearchFilterTableViewCell", bundle: bundle, identifier: "searchFilterTableCell") }

    /// Nib `SearchHistoryTableViewCell`.
    var searchHistoryTableViewCell: RswiftResources.NibReferenceReuseIdentifier<SearchHistoryTableViewCell, SearchHistoryTableViewCell> { .init(name: "SearchHistoryTableViewCell", bundle: bundle, identifier: "searchHistoryTableCell") }

    /// Nib `SettingItemTableViewCell`.
    var settingItemTableViewCell: RswiftResources.NibReferenceReuseIdentifier<SettingItemTableViewCell, SettingItemTableViewCell> { .init(name: "SettingItemTableViewCell", bundle: bundle, identifier: "settingEtcTableCell") }

    /// Nib `SongTableViewCell`.
    var songTableViewCell: RswiftResources.NibReferenceReuseIdentifier<SongTableViewCell, SongTableViewCell> { .init(name: "SongTableViewCell", bundle: bundle, identifier: "SearchResultTableViewCell") }

    /// Nib `UpdatedSongTableViewCell`.
    var updatedSongTableViewCell: RswiftResources.NibReferenceReuseIdentifier<UpdatedSongTableViewCell, UpdatedSongTableViewCell> { .init(name: "UpdatedSongTableViewCell", bundle: bundle, identifier: "updatedSongTableViewCell") }

    func validate() throws {
      if UIKit.UIColor(named: "BackgroundBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundBasic' is used in nib 'FolderTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BackgroundSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundSecondary' is used in nib 'FolderTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextBasic' is used in nib 'FolderTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BackgroundSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundSecondary' is used in nib 'IconResourceCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextBasic' is used in nib 'IconResourceCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BackgroundWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundWhite' is used in nib 'KaraokeBrandPickerTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextBlack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextBlack' is used in nib 'KaraokeBrandPickerTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "AccentYellow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentYellow' is used in nib 'PopUpArchiveFolderTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextBlack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextBlack' is used in nib 'PopUpArchiveFolderTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BackgroundBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundBasic' is used in nib 'PopUpSongOptionTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextBasic' is used in nib 'PopUpSongOptionTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextBlack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextBlack' is used in nib 'SearchFilterTableViewCell', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "magnifyingglass") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'magnifyingglass' is used in nib 'SearchHistoryTableViewCell', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "xmark") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'xmark' is used in nib 'SearchHistoryTableViewCell', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "BackgroundBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundBasic' is used in nib 'SearchHistoryTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "IconBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'IconBasic' is used in nib 'SearchHistoryTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextBasic' is used in nib 'SearchHistoryTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextSecondary' is used in nib 'SearchHistoryTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "chevron-right", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'chevron-right' is used in nib 'SettingItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "information.fill", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'information.fill' is used in nib 'SettingItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BackgroundBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundBasic' is used in nib 'SettingItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BackgroundBlue", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundBlue' is used in nib 'SettingItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "IconSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'IconSecondary' is used in nib 'SettingItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "IconWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'IconWhite' is used in nib 'SettingItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextBasic' is used in nib 'SettingItemTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "music-note", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'music-note' is used in nib 'SongTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "AccentPurpleLight", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentPurpleLight' is used in nib 'SongTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BackgroundBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundBasic' is used in nib 'SongTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BackgroundSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundSecondary' is used in nib 'SongTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextBasic' is used in nib 'SongTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextSecondary' is used in nib 'SongTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "music-note", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'music-note' is used in nib 'UpdatedSongTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "AccentPurpleLight", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentPurpleLight' is used in nib 'UpdatedSongTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BackgroundBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundBasic' is used in nib 'UpdatedSongTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BackgroundSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundSecondary' is used in nib 'UpdatedSongTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextBasic' is used in nib 'UpdatedSongTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextSecondary' is used in nib 'UpdatedSongTableViewCell', but couldn't be loaded.") }
    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 10 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `folderTableViewCell`.
    let folderTableViewCell: RswiftResources.ReuseIdentifier<FolderTableViewCell> = .init(identifier: "folderTableViewCell")

    /// Reuse identifier `iconResourceCollectionCell`.
    let iconResourceCollectionCell: RswiftResources.ReuseIdentifier<IconResourceCollectionViewCell> = .init(identifier: "iconResourceCollectionCell")

    /// Reuse identifier `karaokeBrandTableCell`.
    let karaokeBrandTableCell: RswiftResources.ReuseIdentifier<KaraokeBrandPickerTableViewCell> = .init(identifier: "karaokeBrandTableCell")

    /// Reuse identifier `popUpArchiveTableCell`.
    let popUpArchiveTableCell: RswiftResources.ReuseIdentifier<PopUpArchiveFolderTableViewCell> = .init(identifier: "popUpArchiveTableCell")

    /// Reuse identifier `popUpSongOptionTableCell`.
    let popUpSongOptionTableCell: RswiftResources.ReuseIdentifier<PopUpSongOptionTableViewCell> = .init(identifier: "popUpSongOptionTableCell")

    /// Reuse identifier `searchFilterTableCell`.
    let searchFilterTableCell: RswiftResources.ReuseIdentifier<SearchFilterTableViewCell> = .init(identifier: "searchFilterTableCell")

    /// Reuse identifier `searchHistoryTableCell`.
    let searchHistoryTableCell: RswiftResources.ReuseIdentifier<SearchHistoryTableViewCell> = .init(identifier: "searchHistoryTableCell")

    /// Reuse identifier `SearchResultTableViewCell`.
    let searchResultTableViewCell: RswiftResources.ReuseIdentifier<SongTableViewCell> = .init(identifier: "SearchResultTableViewCell")

    /// Reuse identifier `settingEtcTableCell`.
    let settingEtcTableCell: RswiftResources.ReuseIdentifier<SettingItemTableViewCell> = .init(identifier: "settingEtcTableCell")

    /// Reuse identifier `updatedSongTableViewCell`.
    let updatedSongTableViewCell: RswiftResources.ReuseIdentifier<UpdatedSongTableViewCell> = .init(identifier: "updatedSongTableViewCell")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var archive: archive { .init(bundle: bundle) }
    var folder: folder { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }
    var search: search { .init(bundle: bundle) }
    var setting: setting { .init(bundle: bundle) }

    func archive(bundle: Foundation.Bundle) -> archive {
      .init(bundle: bundle)
    }
    func folder(bundle: Foundation.Bundle) -> folder {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func search(bundle: Foundation.Bundle) -> search {
      .init(bundle: bundle)
    }
    func setting(bundle: Foundation.Bundle) -> setting {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.archive.validate()
      try self.folder.validate()
      try self.launchScreen.validate()
      try self.main.validate()
      try self.search.validate()
      try self.setting.validate()
    }


    /// Storyboard `Archive`.
    struct archive: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = ArchiveFolderViewController

      let bundle: Foundation.Bundle

      let name = "Archive"

      var addSongStoryboard: RswiftResources.StoryboardViewControllerIdentifier<AddSongViewController> { .init(identifier: "AddSongStoryboard", storyboard: name, bundle: bundle) }
      var archiveFolderStoryboard: RswiftResources.StoryboardViewControllerIdentifier<ArchiveFolderViewController> { .init(identifier: "ArchiveFolderStoryboard", storyboard: name, bundle: bundle) }
      var archiveSongStoryboard: RswiftResources.StoryboardViewControllerIdentifier<ArchiveSongViewController> { .init(identifier: "ArchiveSongStoryboard", storyboard: name, bundle: bundle) }
      var karaokeBrandPickerStoryboard: RswiftResources.StoryboardViewControllerIdentifier<KaraokeBrandPickerViewController> { .init(identifier: "karaokeBrandPickerStoryboard", storyboard: name, bundle: bundle) }
      var popUpSongOptionStoryboard: RswiftResources.StoryboardViewControllerIdentifier<PopUpSongOptionViewController> { .init(identifier: "popUpSongOptionStoryboard", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "music-note", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'music-note' is used in storyboard 'Archive', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'plus' is used in storyboard 'Archive', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "xmark") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'xmark' is used in storyboard 'Archive', but couldn't be loaded.") } }
        if UIKit.UIColor(named: "AccentPurple", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentPurple' is used in storyboard 'Archive', but couldn't be loaded.") }
        if UIKit.UIColor(named: "AccentPurpleLight", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentPurpleLight' is used in storyboard 'Archive', but couldn't be loaded.") }
        if UIKit.UIColor(named: "AccentYellow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentYellow' is used in storyboard 'Archive', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BackgroundBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundBasic' is used in storyboard 'Archive', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BackgroundSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundSecondary' is used in storyboard 'Archive', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BackgroundWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundWhite' is used in storyboard 'Archive', but couldn't be loaded.") }
        if UIKit.UIColor(named: "IconBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'IconBasic' is used in storyboard 'Archive', but couldn't be loaded.") }
        if UIKit.UIColor(named: "IconBlack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'IconBlack' is used in storyboard 'Archive', but couldn't be loaded.") }
        if UIKit.UIColor(named: "IconWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'IconWhite' is used in storyboard 'Archive', but couldn't be loaded.") }
        if UIKit.UIColor(named: "LineBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'LineBasic' is used in storyboard 'Archive', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextBasic' is used in storyboard 'Archive', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextBlack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextBlack' is used in storyboard 'Archive', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextSecondary' is used in storyboard 'Archive', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextWhite' is used in storyboard 'Archive', but couldn't be loaded.") }
        if addSongStoryboard() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'addSongStoryboard' could not be loaded from storyboard 'Archive' as 'AddSongViewController'.") }
        if archiveFolderStoryboard() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'archiveFolderStoryboard' could not be loaded from storyboard 'Archive' as 'ArchiveFolderViewController'.") }
        if archiveSongStoryboard() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'archiveSongStoryboard' could not be loaded from storyboard 'Archive' as 'ArchiveSongViewController'.") }
        if karaokeBrandPickerStoryboard() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'karaokeBrandPickerStoryboard' could not be loaded from storyboard 'Archive' as 'KaraokeBrandPickerViewController'.") }
        if popUpSongOptionStoryboard() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'popUpSongOptionStoryboard' could not be loaded from storyboard 'Archive' as 'PopUpSongOptionViewController'.") }
      }
    }

    /// Storyboard `Folder`.
    struct folder: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = PopUpArchiveFolderViewController

      let bundle: Foundation.Bundle

      let name = "Folder"

      var addFolderStoryboard: RswiftResources.StoryboardViewControllerIdentifier<AddFolderViewController> { .init(identifier: "addFolderStoryboard", storyboard: name, bundle: bundle) }
      var popUpArchiveFolderStoryboard: RswiftResources.StoryboardViewControllerIdentifier<PopUpArchiveFolderViewController> { .init(identifier: "popUpArchiveFolderStoryboard", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "folder-filled", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'folder-filled' is used in storyboard 'Folder', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "xmark") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'xmark' is used in storyboard 'Folder', but couldn't be loaded.") } }
        if UIKit.UIColor(named: "AccentPurple", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentPurple' is used in storyboard 'Folder', but couldn't be loaded.") }
        if UIKit.UIColor(named: "AccentYellow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentYellow' is used in storyboard 'Folder', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BackgroundBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundBasic' is used in storyboard 'Folder', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BackgroundSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundSecondary' is used in storyboard 'Folder', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BackgroundWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundWhite' is used in storyboard 'Folder', but couldn't be loaded.") }
        if UIKit.UIColor(named: "IconBlack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'IconBlack' is used in storyboard 'Folder', but couldn't be loaded.") }
        if UIKit.UIColor(named: "IconWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'IconWhite' is used in storyboard 'Folder', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextBasic' is used in storyboard 'Folder', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextBlack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextBlack' is used in storyboard 'Folder', but couldn't be loaded.") }
        if addFolderStoryboard() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'addFolderStoryboard' could not be loaded from storyboard 'Folder' as 'AddFolderViewController'.") }
        if popUpArchiveFolderStoryboard() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'popUpArchiveFolderStoryboard' could not be loaded from storyboard 'Folder' as 'PopUpArchiveFolderViewController'.") }
      }
    }

    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "SplashImage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'SplashImage' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIColor(named: "SplashBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'SplashBackgroundColor' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = MainViewController

      let bundle: Foundation.Bundle

      let name = "Main"

      var mainStoryboard: RswiftResources.StoryboardViewControllerIdentifier<MainViewController> { .init(identifier: "MainStoryboard", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "ArchiveShortcutBackgroundImage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ArchiveShortcutBackgroundImage' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "magnifyingglass") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'magnifyingglass' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "setting", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'setting' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIColor(named: "AccentPurple", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentPurple' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIColor(named: "AccentYellow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentYellow' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIColor(named: "AccentYellowDarker", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentYellowDarker' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BackgroundBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundBasic' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BackgroundWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundWhite' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIColor(named: "IconBasicSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'IconBasicSecondary' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIColor(named: "IconWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'IconWhite' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextSecondary' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextTertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextTertiary' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextWhite' is used in storyboard 'Main', but couldn't be loaded.") }
        if mainStoryboard() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'mainStoryboard' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
      }
    }

    /// Storyboard `Search`.
    struct search: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = SearchViewController

      let bundle: Foundation.Bundle

      let name = "Search"

      var popOverSearchFilterStoryboard: RswiftResources.StoryboardViewControllerIdentifier<PopOverSearchFilterViewController> { .init(identifier: "PopOverSearchFilterStoryboard", storyboard: name, bundle: bundle) }
      var searchHistoryStoryboard: RswiftResources.StoryboardViewControllerIdentifier<SearchHistoryViewController> { .init(identifier: "SearchHistoryStoryboard", storyboard: name, bundle: bundle) }
      var searchResultStoryboard: RswiftResources.StoryboardViewControllerIdentifier<SearchResultViewController> { .init(identifier: "SearchResultStoryboard", storyboard: name, bundle: bundle) }
      var searchStoryboard: RswiftResources.StoryboardViewControllerIdentifier<SearchViewController> { .init(identifier: "SearchStoryboard", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "back-arrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back-arrow' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sort-line", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'sort-line' is used in storyboard 'Search', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "xmark") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'xmark' is used in storyboard 'Search', but couldn't be loaded.") } }
        if UIKit.UIColor(named: "AccentPurple", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentPurple' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIColor(named: "AccentYellow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentYellow' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BackgroundBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundBasic' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BackgroundSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundSecondary' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BackgroundWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundWhite' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIColor(named: "IconBasicSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'IconBasicSecondary' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIColor(named: "IconSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'IconSecondary' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIColor(named: "IconWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'IconWhite' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextBasic' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextBlack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextBlack' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextSecondary' is used in storyboard 'Search', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextWhite' is used in storyboard 'Search', but couldn't be loaded.") }
        if popOverSearchFilterStoryboard() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'popOverSearchFilterStoryboard' could not be loaded from storyboard 'Search' as 'PopOverSearchFilterViewController'.") }
        if searchHistoryStoryboard() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'searchHistoryStoryboard' could not be loaded from storyboard 'Search' as 'SearchHistoryViewController'.") }
        if searchResultStoryboard() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'searchResultStoryboard' could not be loaded from storyboard 'Search' as 'SearchResultViewController'.") }
        if searchStoryboard() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'searchStoryboard' could not be loaded from storyboard 'Search' as 'SearchViewController'.") }
      }
    }

    /// Storyboard `Setting`.
    struct setting: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = SettingViewController

      let bundle: Foundation.Bundle

      let name = "Setting"

      var creditStoryboard: RswiftResources.StoryboardViewControllerIdentifier<CreditViewController> { .init(identifier: "creditStoryboard", storyboard: name, bundle: bundle) }
      var settingStoryboard: RswiftResources.StoryboardViewControllerIdentifier<SettingViewController> { .init(identifier: "settingStoryboard", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "xmark") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'xmark' is used in storyboard 'Setting', but couldn't be loaded.") } }
        if UIKit.UIColor(named: "AccentColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentColor' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIColor(named: "AccentPurple", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentPurple' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BackgroundBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundBasic' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BackgroundSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BackgroundSecondary' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextBasic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextBasic' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextTertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextTertiary' is used in storyboard 'Setting', but couldn't be loaded.") }
        if creditStoryboard() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'creditStoryboard' could not be loaded from storyboard 'Setting' as 'CreditViewController'.") }
        if settingStoryboard() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'settingStoryboard' could not be loaded from storyboard 'Setting' as 'SettingViewController'.") }
      }
    }
  }
}